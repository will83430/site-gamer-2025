// admin-postgres.js - Interface admin connectée directement à PostgreSQL
// AJOUTEZ CET OVERRIDE À LA FIN DE VOTRE FICHIER admin-postgres.js
// Cela va forcer la bonne version de collectFormData

// Override complet après création de l'AdminManager
document.addEventListener('DOMContentLoaded', () => {
    console.log('🔧 OVERRIDE collectFormData avec formatage icônes');
    
    // Attendre que adminManager soit créé
    setTimeout(() => {
        if (window.adminManager) {
            // FORCER le remplacement de la fonction collectFormData
            window.adminManager.collectFormData = function() {
                console.log('🎯 OVERRIDE collectFormData activé !');
                
                const data = {
                    id: this.currentEditingProduct.id,
                    nom: document.getElementById('edit-nom').value,
                    categorie: document.getElementById('edit-categorie').value,
                    prix: document.getElementById('edit-prix').value,
                    description: document.getElementById('edit-description').value,
                    image: document.getElementById('edit-image').value,
                    lien: this.currentEditingProduct.lien,
                    top_du_mois: document.getElementById('edit-top').value === 'true',
                };

                // Fonctionnalités avancées
                const fonctionnalitesText = document.getElementById('edit-fonctionnalites').value;
                data.fonctionnalites_avancees = fonctionnalitesText
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length > 0);

                // ⭐ FORMATAGE FORCÉ avec icônes
                console.log('🎯 Début formatage FORCÉ pour:', data.categorie);
                
                const sectionsMap = {
                    'CONSOLE': [
                        { emoji: "📝", titre: "Description détaillée" },
                        { emoji: "💰", titre: "Prix" },
                        { emoji: "🧩", titre: "Spécifications" },
                        { emoji: "🖥️", titre: "Écran et affichage" },
                        { emoji: "🕹️", titre: "Contrôleurs" },
                        { emoji: "🌐", titre: "Connectivité" },
                        { emoji: "🎮", titre: "Expérience utilisateur" }
                    ],
                    'DRONE': [
                        { emoji: "📝", titre: "Description détaillée" },
                        { emoji: "💰", titre: "Prix" },
                        { emoji: "🧩", titre: "Spécifications" },
                        { emoji: "🎥", titre: "Fonctions vidéo" },
                        { emoji: "🌐", titre: "Connectivité" },
                        { emoji: "🎮", titre: "Expérience utilisateur" }
                    ]
                };
                
                const sections = sectionsMap[data.categorie] || sectionsMap['CONSOLE'];
                data.donnees_fiche = [];
                
                // Récupérer TOUTES les textareas
                const textareas = document.querySelectorAll('#donnees-fiche-container textarea');
                console.log(`📝 Textareas trouvés: ${textareas.length}`);
                
                textareas.forEach((textarea, index) => {
                    const value = textarea.value || '';
                    console.log(`📋 Textarea [${index}]: "${value.substring(0, 30)}..."`);
                    
                    if (sections[index] && value.trim()) {
                        const formatted = `${sections[index].emoji} ${sections[index].titre}\n${value.trim()}`;
                        data.donnees_fiche.push(formatted);
                        console.log(`✅ FORMATÉ [${index}]: "${formatted.substring(0, 50)}..."`);
                    } else {
                        data.donnees_fiche.push(value);
                        console.log(`⚪ BRUT [${index}]: "${value.substring(0, 30)}..."`);
                    }
                });
                
                console.log('🎯 RÉSULTAT FINAL OVERRIDE:', data.donnees_fiche);
                return data;
            };
            
            console.log('✅ Override collectFormData installé !');
        } else {
            console.error('❌ adminManager non trouvé pour override');
        }
    }, 1000);
});

// Initialisation quand la page est chargée
document.addEventListener('DOMContentLoaded', () => {
    console.log('🎯 Initialisation interface admin PostgreSQL directe');
    window.adminManager = new AdminManager();
});

// Fonctions globales pour compatibilité avec l'HTML existant
function loadProductForEdit() {
    if (window.adminManager) {
        window.adminManager.loadProductForEdit();
    }
}

function saveProduct() {
    if (window.adminManager) {
        window.adminManager.saveToPostgreSQL();
    }
}