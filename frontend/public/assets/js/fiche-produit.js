// assets/js/fiche-produit.js - Connexion des fiches HTML individuelles √† PostgreSQL

// Configuration API
const API_URL = (() => {
    const hostname = window.location.hostname;
    const protocol = window.location.protocol;
    const port = '3000';
    
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
        return 'http://localhost:3000/api';
    }
    
    return `${protocol}//${hostname}:${port}/api`;
})();

// Fonction principale pour charger les donn√©es du produit depuis PostgreSQL
async function chargerDonneesProduit() {
    // R√©cup√©rer le nom du produit depuis le titre H1 de la page
    const h1Element = document.querySelector("h1");
    if (!h1Element) {
        console.error("Pas de titre H1 trouv√© sur la page");
        return;
    }
    
    const nomProduit = h1Element.textContent.trim();
    console.log(`üìÑ Chargement des donn√©es pour: ${nomProduit}`);
    
    try {
        // Charger TOUS les produits depuis PostgreSQL
        const response = await fetch(`${API_URL}/produits`);
        const data = await response.json();
        
        if (data.success && data.data) {
            // Trouver le produit correspondant par nom
            const produit = data.data.find(p => 
                p.nom && p.nom.toLowerCase() === nomProduit.toLowerCase()
            );
            
            if (produit) {
                console.log("‚úÖ Produit trouv√© dans PostgreSQL:", produit);
                afficherDonneesProduit(produit);
            } else {
                console.warn(`‚ö†Ô∏è Produit "${nomProduit}" non trouv√© dans PostgreSQL`);
                afficherContenuParDefaut();
            }
        } else {
            console.error("‚ùå Erreur lors du chargement des donn√©es");
            afficherContenuParDefaut();
        }
    } catch (error) {
        console.error("‚ùå Erreur de connexion √† PostgreSQL:", error);
        console.log("üí° Assurez-vous que le serveur est lanc√©: node server.js");
        afficherContenuParDefaut();
    }
}

// Fonction pour afficher les donn√©es du produit
function afficherDonneesProduit(produit) {
    // 1. Badge top du mois
    const badgeContainer = document.getElementById("badge-top-mois");
    if (badgeContainer && produit.top_du_mois) {
        badgeContainer.innerHTML = `
            <div style="background: linear-gradient(45deg, #ffd700, #ffed4e); 
                        padding: 10px; 
                        margin-bottom: 20px; 
                        text-align: center; 
                        border-radius: 8px;
                        font-weight: bold;
                        box-shadow: 0 3px 10px rgba(255, 215, 0, 0.3);">
                ‚≠ê Ce produit est en vedette ce mois-ci !
            </div>
        `;
    }
    
    // 2. Description
    const descriptionElement = document.querySelector(".description");
    if (descriptionElement && produit.description) {
        descriptionElement.textContent = produit.description;
    }
    
    // 3. Image principale - CORRECTION POUR LE SLASH
const imgElement = document.querySelector(".gallery img");
if (imgElement) {
    // R√©cup√©rer l'image selon la priorit√©
    let imageSource = produit.image_url || produit.image_data || produit.image || '';
    
    console.log('üîç Image brute depuis PostgreSQL:', imageSource);
    
    if (imageSource) {
        // Si c'est du base64, l'utiliser directement
        if (imageSource.startsWith('data:image/')) {
            console.log('üñºÔ∏è Image base64 d√©tect√©e');
        }
        // Si c'est une URL compl√®te HTTP, l'utiliser directement
        else if (imageSource.startsWith('http')) {
            console.log('üñºÔ∏è URL compl√®te d√©tect√©e');
        }
        // Sinon, c'est un chemin √† traiter
        else {
            // √âTAPE 1: Supprimer le "/" au d√©but s'il existe
            if (imageSource.startsWith('/')) {
                imageSource = imageSource.substring(1);
                console.log('üîß Slash supprim√©:', imageSource);
            }
            
            // √âTAPE 2: S'assurer que √ßa commence par "assets/images/"
            if (!imageSource.startsWith('assets/images/')) {
                imageSource = 'assets/images/' + imageSource;
                console.log('üîß Chemin assets ajout√©:', imageSource);
            }
            
            // √âTAPE 3: Ajouter le chemin relatif pour les fiches (../../)
            imageSource = '../../' + imageSource;
            
            console.log('üñºÔ∏è Chemin final pour fiche:', imageSource);
        }
        
        // Appliquer l'image
        imgElement.src = imageSource;
        imgElement.alt = produit.nom;
        console.log('‚úÖ Image mise √† jour:', imageSource);
        
        // Gestion d'erreur de chargement
        imgElement.onerror = function() {
            console.warn('‚ö†Ô∏è Erreur chargement, fallback vers placeholder');
            this.src = '../../assets/images/placeholder.png';
        };
    } else {
        // Aucune image trouv√©e
        imageSource = '../../assets/images/placeholder.png';
        imgElement.src = imageSource;
        console.log('‚ö†Ô∏è Aucune image, placeholder utilis√©');
    }
}
    
    // 4. Contenu principal (donn√©es de fiche)
    const contentDiv = document.getElementById("product-content");
    if (contentDiv) {
        contentDiv.innerHTML = "";
        
        // Si on a des donn√©es de fiche
        if (produit.donnees_fiche && produit.donnees_fiche.length > 0) {
            // Les donn√©es de fiche sont dans l'ordre d√©fini dans l'admin
            const sections = [
                { emoji: "üìù", titre: "Description d√©taill√©e", index: 0 },
                { emoji: "üí∞", titre: "Prix", index: 1 },
                { emoji: "üß©", titre: "Sp√©cifications", index: 2 }
            ];
            
            // Ajouter les sections sp√©cifiques selon la cat√©gorie
            const sectionsParCategorie = {
                'DRONE': [
                    { emoji: "üé•", titre: "Fonctions vid√©o", index: 3 }
                ],
                'CONSOLE': [
                    { emoji: "üñ•Ô∏è", titre: "√âcran et affichage", index: 3 },
                    { emoji: "üïπÔ∏è", titre: "Contr√¥leurs", index: 4 }
                ],
                'TABLETTE': [
                    { emoji: "üñ•Ô∏è", titre: "√âcran et affichage", index: 3 },
                    { emoji: "üñäÔ∏è", titre: "Accessoires", index: 4 }
                ],
                'SMARTPHONE': [
                    { emoji: "üì∏", titre: "Appareil photo", index: 3 }
                ],
                'PC GAMING': [
                    { emoji: "üéÆ", titre: "Fonctions gaming", index: 3 }
                ],
                'SERVEUR': [
                    { emoji: "üñ•Ô∏è", titre: "Performances", index: 3 }
                ],
                'CASQUE AUDIO': [
                    { emoji: "üéß", titre: "Fonctions audio", index: 3 }
                ],
                'MONTRE CONNECTE': [
                    { emoji: "‚åö", titre: "Sport et sant√©", index: 3 }
                ],
                'CASQUE VR': [
                    { emoji: "ü•Ω", titre: "R√©alit√© virtuelle", index: 3 }
                ]
            };
            
            // Ajouter les sections sp√©cifiques de la cat√©gorie
            if (produit.categorie && sectionsParCategorie[produit.categorie]) {
                sections.push(...sectionsParCategorie[produit.categorie]);
            }
            
            // Ajouter les sections finales communes
            sections.push(
                { emoji: "üåê", titre: "Connectivit√©", index: sections.length },
                { emoji: "üéÆ", titre: "Exp√©rience utilisateur", index: sections.length + 1 }
            );
            
            // Cr√©er les paragraphes
            sections.forEach(section => {
                if (produit.donnees_fiche[section.index]) {
                    const p = document.createElement("p");
                    p.innerHTML = produit.donnees_fiche[section.index]
                        .replace(/\\n/g, "<br>")
                        .replace(/\n/g, "<br>");
                    contentDiv.appendChild(p);
                }
            });
        }
        
        // Ajouter le prix s'il existe et n'est pas d√©j√† dans donnees_fiche
        if (produit.prix && !contentDiv.innerHTML.includes(produit.prix)) {
            const prixP = document.createElement("p");
            prixP.innerHTML = `<strong>üí∞ Prix :</strong> ${produit.prix}`;
            contentDiv.insertBefore(prixP, contentDiv.firstChild);
        }
        
        // SUPPRIM√â : Les fonctionnalit√©s avanc√©es ne sont plus affich√©es
        // Si tu veux les r√©activer plus tard, d√©commente le code ci-dessous :
        /*
        if (produit.fonctionnalites_avancees && produit.fonctionnalites_avancees.length > 0) {
            const featuresDiv = document.createElement("div");
            featuresDiv.innerHTML = `
                <h3 style="margin-top: 30px; color: #667eea;">‚ú® Fonctionnalit√©s principales</h3>
                <ul style="line-height: 1.8;">
                    ${produit.fonctionnalites_avancees.map(f => `<li>${f}</li>`).join('')}
                </ul>
            `;
            contentDiv.appendChild(featuresDiv);
        }
        */
        
        // Si le contenu est toujours vide, afficher le contenu par d√©faut
        if (contentDiv.innerHTML === "") {
            afficherContenuParDefaut();
        }
    }
}

// Fonction pour afficher le contenu par d√©faut
function afficherContenuParDefaut() {
    const contentDiv = document.getElementById("product-content");
    if (contentDiv) {
        contentDiv.innerHTML = `
            <p style="color: #666; font-style: italic;">
                ‚ÑπÔ∏è Les informations d√©taill√©es de ce produit ne sont pas encore disponibles dans la base de donn√©es.
            </p>
            <p>üí∞ <strong>Prix :</strong> √Ä d√©finir</p>
            <p>üß© <strong>Sp√©cifications :</strong> √Ä remplir</p>
            <p>üåê <strong>Fonctionnalit√©s :</strong> √Ä remplir</p>
            <p>üéÆ <strong>Exp√©rience :</strong> √Ä remplir</p>
        `;
    }
}

// Fonction pour initialiser le lightbox
function initLightbox() {
    const gallery = document.querySelector(".gallery img");
    const lightbox = document.getElementById("lightbox");
    const lightboxImg = document.getElementById("lightbox-img");
    
    if (gallery && lightbox && lightboxImg) {
        gallery.addEventListener("click", () => {
            lightbox.style.display = "flex";
            lightboxImg.src = gallery.src;
        });
        
        lightbox.addEventListener("click", () => {
            lightbox.style.display = "none";
        });
    }
}

// V√©rifier la connexion au serveur
async function verifierConnexion() {
    try {
        const response = await fetch(`${API_URL}/test`);
        const data = await response.json();
        
        if (data.success) {
            console.log("‚úÖ Connexion PostgreSQL √©tablie");
            return true;
        }
    } catch (error) {
        console.error("‚ùå Serveur PostgreSQL non accessible");
        console.log("üí° Lancez le serveur: node server.js");
        return false;
    }
}

// Lancer le chargement au d√©marrage
document.addEventListener("DOMContentLoaded", async () => {
    console.log("üöÄ Initialisation de la fiche produit");
    
    // V√©rifier la connexion
    const connected = await verifierConnexion();
    
    if (connected) {
        // Charger les donn√©es du produit
        await chargerDonneesProduit();
    } else {
        // Afficher un message d'erreur
        const contentDiv = document.getElementById("product-content");
        if (contentDiv) {
            contentDiv.innerHTML = `
                <div style="background: #f8d7da; color: #721c24; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    ‚ö†Ô∏è <strong>Erreur de connexion</strong><br>
                    Impossible de se connecter √† la base de donn√©es PostgreSQL.<br>
                    Assurez-vous que le serveur est lanc√© avec: <code>node server.js</code>
                </div>
            ` + contentDiv.innerHTML;
        }
    }
    
    // Initialiser le lightbox
    initLightbox();
});

// Export pour utilisation globale si n√©cessaire
window.ficheProduit = {
    chargerDonneesProduit,
    afficherDonneesProduit,
    verifierConnexion
};