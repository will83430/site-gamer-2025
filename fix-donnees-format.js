// fix-donnees-format.js
// Corrige le format des donn√©es dans PostgreSQL

const { Pool } = require('pg');

const pool = new Pool({
  user: 'postgres',
  host: 'localhost', 
  database: 'postgres',
  password: 'Wilfried!1985',
  port: 5432,
});

function fixFormat(texte) {
    // Si le texte commence par un emoji suivi directement du texte
    const emojiRegex = /^([üî•üí∞üß©üåêüéÆüñ•Ô∏èüïπÔ∏èüé•üì∏üéß‚åöüìùüöÅüì±üíªüñ®Ô∏èüéØ‚ö°üîßüé®üè†üöóüé™üìä]+)\s*(.+)/;
    const match = texte.match(emojiRegex);
    
    if (match) {
        const emoji = match[1];
        let contenu = match[2];
        
        // D√©tecter le titre et nettoyer le contenu
        let titre = '';
        if (contenu.includes('Prix')) {
            titre = 'Prix';
            contenu = contenu.replace(/^Prix\s*[::-]?\s*/, ''); // Enlever "Prix :" du d√©but
        } else if (contenu.includes('Sp√©cifications')) {
            titre = 'Sp√©cifications';
            contenu = contenu.replace(/^Sp√©cifications\s*[-:]?\s*/, ''); // Enlever "Sp√©cifications-" du d√©but
        } else if (contenu.includes('Fonctionnalit√©s')) {
            titre = 'Fonctionnalit√©s';
            contenu = contenu.replace(/^Fonctionnalit√©s\s*[-:]?\s*/, '');
        } else if (contenu.includes('Usage')) {
            titre = 'Usage recommand√©';
            contenu = contenu.replace(/^Usage recommand√©\s*[-:]?\s*/, '');
        } else if (contenu.includes('√âcran')) {
            titre = '√âcran et affichage';
            contenu = contenu.replace(/^√âcran.*?[-:]?\s*/, '');
        } else if (contenu.includes('Connectivit√©')) {
            titre = 'Connectivit√©';
            contenu = contenu.replace(/^Connectivit√©\s*[-:]?\s*/, '');
        } else if (contenu.includes('gaming')) {
            titre = 'Fonctions gaming';
        } else if (contenu.includes('vid√©o')) {
            titre = 'Fonctions vid√©o';
        } else if (contenu.includes('audio')) {
            titre = 'Fonctions audio';
        } else if (contenu.includes('sport') || contenu.includes('sant√©')) {
            titre = 'Sport et sant√©';
        } else {
            titre = 'Description d√©taill√©e';
        }
        
        return `${emoji} ${titre}\n${contenu}`;
    }
    
    // Si pas d'emoji au d√©but, ajouter Description
    if (texte.trim().length > 0 && !texte.match(/^[üî•üí∞üß©üåêüéÆüñ•Ô∏èüïπÔ∏èüé•üì∏üéß‚åöüìùüöÅüì±üíªüñ®Ô∏èüéØ‚ö°üîßüé®üè†üöóüé™üìä]/)) {
        return `üìù Description d√©taill√©e\n${texte}`;
    }
    
    return texte;
}

async function fixAllProducts() {
    try {
        console.log('üîß Correction du format des donn√©es...\n');
        
        // R√©cup√©rer tous les produits avec des donnees_fiche
        const result = await pool.query(`
            SELECT id, nom, donnees_fiche 
            FROM produits 
            WHERE donnees_fiche IS NOT NULL 
            AND array_length(donnees_fiche, 1) > 0
        `);
        
        console.log(`üìä ${result.rows.length} produits √† traiter\n`);
        
        for (const produit of result.rows) {
            console.log(`üîß Traitement: ${produit.nom}`);
            
            const nouvellesDonnees = produit.donnees_fiche
                .filter(d => d && d.trim().length > 0) // Enlever les entr√©es vides
                .map(donnee => fixFormat(donnee));
            
            // Mettre √† jour en base
            await pool.query(
                'UPDATE produits SET donnees_fiche = $1 WHERE id = $2',
                [nouvellesDonnees, produit.id]
            );
            
            console.log(`   ‚úÖ ${nouvellesDonnees.length} entr√©es corrig√©es`);
        }
        
        console.log('\nüéâ Correction termin√©e !');
        console.log('üí° Teste maintenant une fiche produit dans le navigateur');
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    } finally {
        await pool.end();
    }
}

// Test de la fonction de correction sur le Vibox
async function testVibox() {
    try {
        console.log('üß™ Test de correction sur le Vibox...\n');
        
        const testData = [
            "PC gaming haut de gamme avec √©clairage RGB, con√ßu pour les performances en 4K et la r√©alit√© virtuelle.",
            "üí∞ Prix : 1549,99 ‚Ç¨",
            "üß© Sp√©cifications- Processeur : Intel Core i9-12900K- RAM : 32 Go DDR5- Stockage : 2 To SSD NVMe- Carte Graphique : NVIDIA GeForce RTX 4080- Connectivit√© : Wi-Fi 6, Bluetooth 5.2- Bo√Ætier : Tour ATX avec refroidissement liquide RGB",
            "üåê Fonctionnalit√©s- Optimisation thermique avanc√©e- Support multi-√©crans- Mode streaming haute performance- Compatible VR avec Oculus et HTC Vive",
            "üéÆ Usage recommand√©- Id√©al pour le gaming AAA, le montage vid√©o 4K, la mod√©lisation 3D et les exp√©riences immersives multi-√©crans."
        ];
        
        testData.forEach((data, index) => {
            console.log(`--- Test ${index} ---`);
            console.log(`Avant: "${data}"`);
            const corrigee = fixFormat(data);
            console.log(`Apr√®s: "${corrigee}"`);
            console.log('');
        });
        
    } catch (error) {
        console.error('‚ùå Erreur test:', error.message);
    }
}

// Choix: test ou correction compl√®te
const args = process.argv.slice(2);
if (args.includes('--test')) {
    testVibox();
} else {
    fixAllProducts();
}